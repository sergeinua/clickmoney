<?php





class Logger
{
// ----------------------------------------------------- Contsnats ---------------------------------------------------

	// Severity Levels   
	const EMERG = 0;  								// Emergency: system is unusable
	const ALERT = 1;  								// Alert: action must be taken immediately
	const CRIT = 2;  								// Critical: critical conditions
	const ERR = 3;  								// Error: error conditions
	const WARN = 4;  								// Warning: warning conditions
	const NOTICE = 5;  								// Notice: normal but significant condition
	const INFO = 6;  								// Informational: informational messages
	const DEBUG = 7;  								// Debug: debug messages
	const OFF = 8;									// Off: no logging
	
	
    // Internal status codes
    const STATUS_LOG_OPEN    = 1;
    const STATUS_OPEN_FAILED = 2;
    const STATUS_LOG_CLOSED  = 3;

    
// ----------------------------------------------------- Private Properties ---------------------------------------------------
    private $m_log_file_status = self::STATUS_LOG_CLOSED; 	// Current status of the log file
    private $m_internal_error_messages_queue = array(); 						// Holds messages generated by the class
    private $m_log_file_path = null; 							// Path to the log file
    private $m_current_severity = self::INFO; 				// Current minimum logging threshold
    private $m_file_handle = null; 							// This holds the file handle for this instance's log file
    private $m_internal_error_messages = array( 							// Standard messages produced by the class. Can be modified for il8n
        'writefail'   => 'The file could not be written to. Check that appropriate permissions have been set.',
        'opensuccess' => 'The log file was opened successfully.',
        'openfail'    => 'The file could not be opened. Check permissions.',
    );
    private static $m_default_severity = SEVERITY_LEVEL; // Default severity of log messages, if not specified
    private static $m_date_format = 'Y-m-d G:i:s'; // Valid PHP date() format string for log timestamps
    private static $m_default_log_file_permissions = 0777; // Octal notation for default permissions of the log file
    private static $m_instances = array(); // Array of Logger instances, part of Singleton pattern

    
    
    /**
     * Partially implements the Singleton pattern. Each $logDirectory gets one
     * instance.
     *
     * @param string  $logDirectory File path to the logging directory
     * @param integer $severity     One of the pre-defined severity constants
     * @return Logger
     */
    public static function instance($logDirectory = false, $severity = false)
    {
        if ($severity === false) {
            $severity = self::$m_default_severity;
        }
        
        if ($logDirectory === false) {
            if (count(self::$m_instances) > 0) {
                return current(self::$m_instances);
            } else {
                $logDirectory = LOG_DIRECTORY;
            }
        }

        if (in_array($logDirectory, self::$m_instances)) {
            return self::$m_instances[$logDirectory];
        }

        self::$m_instances[$logDirectory] = new self($logDirectory, $severity);

        return self::$m_instances[$logDirectory];
    }

    /**
     * Class constructor
     *
     * @param string  $logDirectory File path to the logging directory
     * @param integer $severity     One of the pre-defined severity constants
     * @return void
     */
    public function __construct($logDirectory, $severity)
    {
        $logDirectory = rtrim($logDirectory, '\\/');

        if ($severity === self::OFF) {
            return;
        }

        $this->m_log_file_path = $logDirectory
            . DIRECTORY_SEPARATOR
            . 'log_'
            . date('Y-m-d')
            . '.txt';

        $this->m_current_severity = $severity;
        if (!file_exists($logDirectory)) {
            mkdir($logDirectory, self::$m_default_log_file_permissions, true);
        }

        if (file_exists($this->m_log_file_path) && !is_writable($this->m_log_file_path)) {
            $this->m_log_file_status = self::STATUS_OPEN_FAILED;
            $this->m_internal_error_messages_queue[] = $this->m_internal_error_messages['writefail'];
            return;
        }

        if (($this->m_file_handle = fopen($this->m_log_file_path, 'a'))) {
            $this->m_log_file_status = self::STATUS_LOG_OPEN;
            $this->m_internal_error_messages_queue[] = $this->m_internal_error_messages['opensuccess'];
        } else {
            $this->m_log_file_status = self::STATUS_OPEN_FAILED;
            $this->m_internal_error_messages_queue[] = $this->m_internal_error_messages['openfail'];
        }
    }

    /**
     * Class destructor
     */
    public function __destruct()
    {
        if ($this->m_file_handle) {
            fclose($this->m_file_handle);
        }
    }
    /**
     * Writes a $line to the log with a severity level of DEBUG
     *
     * @param string $line Information to log
     * @return void
     */
    public function logDebug($line)
    {
        $this->log($line, self::DEBUG);
    }

    /**
     * Returns (and removes) the last message from the queue.
     * @return string
     */
    public function getMessage()
    {
        return array_pop($this->m_internal_error_messages_queue);
    }

    /**
     * Returns the entire message queue (leaving it intact)
     * @return array
     */
    public function getMessages()
    {
        return $this->m_internal_error_messages_queue;
    }

    /**
     * Empties the message queue
     * @return void
     */
    public function clearMessages()
    {
        $this->m_internal_error_messages_queue = array();
    }

    /**
     * Sets the date format used by all instances of Logger
     * 
     * @param string $dateFormat Valid format string for date()
     */
    public static function setDateFormat($dateFormat)
    {
  		self::$m_date_format = $dateFormat;
    }

    /**
     * Writes a $line to the log with a severity level of INFO. Any information
     * can be used here, or it could be used with E_STRICT errors
     *
     * @param string $line Information to log
     * @return void
     */
    public function logInfo($line)
    {
        $this->log($line, self::INFO);
    }

    /**
     * Writes a $line to the log with a severity level of NOTICE. Generally
     * corresponds to E_STRICT, E_NOTICE, or E_USER_NOTICE errors
     *
     * @param string $line Information to log
     * @return void
     */
    public function logNotice($line)
    {
        $this->log($line, self::NOTICE);
    }

    /**
     * Writes a $line to the log with a severity level of WARN. Generally
     * corresponds to E_WARNING, E_USER_WARNING, E_CORE_WARNING, or 
     * E_COMPILE_WARNING
     *
     * @param string $line Information to log
     * @return void
     */
    public function logWarn($line)
    {
        $this->log($line, self::WARN);
    }

    /**
     * Writes a $line to the log with a severity level of ERR. Most likely used
     * with E_RECOVERABLE_ERROR
     *
     * @param string $line Information to log
     * @return void
     */
    public function logError($line)
    {
        $this->log($line, self::ERR);
    }

    /**
     * Writes a $line to the log with a severity level of ALERT.
     *
     * @param string $line Information to log
     * @return void
     */
    public function logAlert($line)
    {
        $this->log($line, self::ALERT);
    }

    /**
     * Writes a $line to the log with a severity level of CRIT.
     *
     * @param string $line Information to log
     * @return void
     */
    public function logCrit($line)
    {
        $this->log($line, self::CRIT);
    }

    /**
     * Writes a $line to the log with a severity level of EMERG.
     *
     * @param string $line Information to log
     * @return void
     */
    public function logEmerg($line)
    {
        $this->log($line, self::EMERG);
    }

    /**
     * Writes a $line to the log with the given severity
     *
     * @param string  $line     Text to add to the log
     * @param integer $severity Severity level of log message (use constants)
     */
    public function log($line, $severity)
    {
        if ($this->m_current_severity >= $severity) {
            $status = $this->_getTimeLine($severity);
            $this->writeFreeFormLine("$status $line \n");
        }
    }

    /**
     * Writes a line to the log without prepending a status or timestamp
     *
     * @param string $line Line to write to the log
     * @return void
     */
    public function writeFreeFormLine($line)
    {
        if ($this->m_log_file_status == self::STATUS_LOG_OPEN
            && $this->m_current_severity != self::OFF) {
            if (fwrite($this->m_file_handle, $line) === false) {
                $this->m_internal_error_messages_queue[] = $this->m_internal_error_messages['writefail'];
            }
        }
    }

    private function _getTimeLine($level)
    {
        $time = date(self::$m_date_format);
		$ip = getUserIP();
		$message_prefix = "$time - $ip -";
        switch ($level) {
            case self::EMERG:
                return "$message_prefix EMERG -->";
            case self::ALERT:
                return "$message_prefix ALERT -->";
            case self::CRIT:
                return "$message_prefix CRIT -->";
            case self::NOTICE:
                return "$message_prefix NOTICE -->";
            case self::INFO:
                return "$message_prefix INFO -->";
            case self::WARN:
                return "$message_prefix WARN -->";
            case self::DEBUG:
                return "$message_prefix DEBUG -->";
            case self::ERR:
                return "$message_prefix ERROR -->";
            default:
                return "$message_prefix LOG -->";
        }
    }
}
?>